AE_SHADER_NAME: "!!AE_SHADER_FILE_NAME"
AE_SHADER_DESC: "Shader for Wireframe."
#These properties are used to prepare the render.
AE_PREP_PROPERTIES:
  - AE_PREP_PROPERTY_IDENTIFIER: "GL_ENABLE"
    AE_PREP_PROPERTY_PARAMETERS: ["BLEND"]
  - AE_PREP_PROPERTY_IDENTIFIER: "BLEND_FUNC"
    AE_PREP_PROPERTY_PARAMETERS: ["GL_ONE_MINUS_SRC", "GL_ONE"]
  - AE_PREP_PROPERTY_IDENTIFIER: "DEPTH_MASK"
    AE_PREP_PROPERTY_PARAMETERS: ["GL_FALSE"]
  - AE_PREP_PROPERTY_IDENTIFIER: "DEPTH_FUNC"
    AE_PREP_PROPERTY_PARAMETERS: ["GL_EQUAL"]
  - AE_PREP_PROPERTY_IDENTIFIER: "GL_DRAW_MODE"
    AE_PREP_PROPERTY_PARAMETERS: ["GL_TRIANGLES"]
#Here is where you define the shaders
AE_SHADER_GLSL_PROGRAMS:
  - AE_SHADER_GLSL_PROGRAM_TYPE: "AE_VERTEX_SHADER"
    AE_SHADER_GLSL_PROGRAM_NAME: "vertex_shader"
    AE_SHADER_GLSL_PROGRAM_SOURCE: |
      #version 460 core
      layout (location = 0) in vec3 position;
      layout (location = 1) in vec2 texCoord;
      layout (location = 2) in vec3 normal;
      layout (location = 3) in vec3 tangent;    
      out vec2 texCoord0;
      out vec3 normal0;
      out vec3 worldPosition0;
      out mat3 tbnMatrix;
      uniform vec3 C_eyePos; 
      uniform float specularIntensity;
      uniform float specularPower;
      uniform int normal_mapping_enabled;
      uniform mat4 T_model;
      uniform mat4 T_MVP;
      uniform mat4 T_MVP1;
      struct BaseLight {
        vec3 color;
        float intensity;
      };
      struct DirectionalLight {
        BaseLight base;
        vec3 direction;
      };
      struct Attenuation {
        float constant;
        float linear;
        float exponent;
      };
      struct PointLight {
        BaseLight base;
        Attenuation atten;
        vec3 position;
        float range;
      };
      struct SpotLight {
        PointLight pointLight;
        vec3 direction;
        float cutoff;
      };
      vec4 calcLight(BaseLight base, vec3 direction, vec3 normal, vec3 worldPosition) {
        float diffuseFactor = dot(normal, -direction);
        vec4 diffuseColor = vec4(0, 0, 0, 0);
        vec4 specularColor = vec4(0, 0, 0, 0);
        if (diffuseFactor > 0) {
          diffuseColor = vec4(base.color, 1.0) * base.intensity * diffuseFactor;
          vec3 directionToEye = normalize(C_eyePos - worldPosition);
          vec3 reflectDirection = normalize(reflect(direction, normal));
          float specularFactor = dot(directionToEye, reflectDirection);
          specularFactor = pow(specularFactor, specularPower);
          if(specularFactor > 0){
            specularColor = vec4(base.color, 1.0) * specularIntensity * specularFactor;
          }
        }
        return diffuseColor + specularColor;
      }
      vec4 calcDirectionalLight(DirectionalLight directionalLight, vec3 normal, vec3 worldPosition) {
        return (calcLight(directionalLight.base, -directionalLight.direction, normal, worldPosition));
      }
      vec4 calcPointLight(PointLight pointLight, vec3 normal, vec3 worldPosition){
        vec3 lightDirection = worldPosition - pointLight.position;
        float distanceToPoint = length(lightDirection);
        if (distanceToPoint > pointLight.range) {
          return vec4(0, 0, 0, 0);
        }
        lightDirection = normalize(lightDirection);
        vec4 color = calcLight(pointLight.base, lightDirection, normal, worldPosition);
        float attenuation = pointLight.atten.constant + pointLight.atten.linear * distanceToPoint +
        pointLight.atten.exponent * distanceToPoint * distanceToPoint + 0.0001;
        return color / attenuation;
      }
      vec4 calcSpotLight(SpotLight spotLight, vec3 normal, vec3 worldPosition)  {
        vec3 lightDirection = normalize(worldPosition - spotLight.pointLight.position);
        float spotFactor = dot(lightDirection, spotLight.direction);
        vec4 color = vec4(0, 0, 0, 0);
        if (spotFactor > spotLight.cutoff) {
          color = calcPointLight(spotLight.pointLight, normal, worldPosition) *
            (1.0 - (1.0 - spotFactor) / (1.0 - spotLight.cutoff));
        }
        return color;
      }
      vec3 getNormalFromMap(sampler2D normal_map, vec2 texCoord, mat3 tbnMatrix)  {
          vec3 normal = tbnMatrix * (255.0/128.0 * texture2D(normal_map, texCoord0.xy).xyz - 1);
          return normal;
      }
      void main() {
        gl_Position = T_MVP * vec4(position, 1.0) * T_MVP1;
        texCoord0 = texCoord;
        normal0 = (T_model * vec4(normal, 0.0)).xyz;
        worldPosition0 = (T_model * vec4(position, 1.0)).xyz;
        vec3 n = normalize((T_model * vec4(normal, 0.0)).xyz);
        vec3 t = normalize((T_model * vec4(tangent, 0.0)).xyz);
        t = normalize(t - dot(t, n) * n);
        vec3 biTangent = cross(t, n);
        tbnMatrix = mat3(t, biTangent, n);
      }
  - AE_SHADER_GLSL_PROGRAM_TYPE: "AE_FRAGMENT_SHADER"
    AE_SHADER_GLSL_PROGRAM_NAME: "fragment_shader"
    AE_SHADER_GLSL_PROGRAM_SOURCE: |
      #version 330 core
      in vec2 texCoord0;
      in vec3 normal0;
      in vec3 worldPosition0;
      in mat3 tbnMatrix;

      uniform sampler2D diffuse;
      uniform sampler2D normal_map;
      // Vars
      //Position of the camera.
      uniform vec3 C_eyePos; 
      uniform float specularIntensity;
      uniform float specularPower;

      // Booleans 0 - fasle, 1 - true.
      uniform int normal_mapping_enabled;

      // Structures
      struct BaseLight {
        vec3 color;
        float intensity;
      };

      struct DirectionalLight {
        BaseLight base;
        vec3 direction;
      };

      struct Attenuation {
        float constant;
        float linear;
        float exponent;
      };

      struct PointLight {
        BaseLight base;
        Attenuation atten;
        vec3 position;
        float range;
      };

      struct SpotLight {
        PointLight pointLight;
        vec3 direction;
        float cutoff;
      };

      // Functions

      vec4 calcLight(BaseLight base, vec3 direction, vec3 normal, vec3 worldPosition) {
        float diffuseFactor = dot(normal, -direction);
        vec4 diffuseColor = vec4(0, 0, 0, 0);
        vec4 specularColor = vec4(0, 0, 0, 0);

        if (diffuseFactor > 0) {
          diffuseColor = vec4(base.color, 1.0) * base.intensity * diffuseFactor;

          vec3 directionToEye = normalize(C_eyePos - worldPosition);

          // More Accurate I guess but ididnt like the way it looked
          //vec3 halfDirection = normalize(directionToEye - direction);
          //float specularFactor = dot(halfDirection, normal);

          vec3 reflectDirection = normalize(reflect(direction, normal));
          float specularFactor = dot(directionToEye, reflectDirection);

          specularFactor = pow(specularFactor, specularPower);

          if(specularFactor > 0){
            specularColor = vec4(base.color, 1.0) * specularIntensity * specularFactor;
          }
        }
        return diffuseColor + specularColor;
      }

      vec4 calcDirectionalLight(DirectionalLight directionalLight, vec3 normal, vec3 worldPosition) {
        return (calcLight(directionalLight.base, -directionalLight.direction, normal, worldPosition));
      }

      vec4 calcPointLight(PointLight pointLight, vec3 normal, vec3 worldPosition){
        vec3 lightDirection = worldPosition - pointLight.position;
        float distanceToPoint = length(lightDirection);
        if (distanceToPoint > pointLight.range) {
          return vec4(0, 0, 0, 0);
        }
        lightDirection = normalize(lightDirection);

        vec4 color = calcLight(pointLight.base, lightDirection, normal, worldPosition);

        float attenuation = pointLight.atten.constant + pointLight.atten.linear * distanceToPoint +
        pointLight.atten.exponent * distanceToPoint * distanceToPoint + 0.0001;

        return color / attenuation;
      }

      vec4 calcSpotLight(SpotLight spotLight, vec3 normal, vec3 worldPosition)  {
        vec3 lightDirection = normalize(worldPosition - spotLight.pointLight.position);
        float spotFactor = dot(lightDirection, spotLight.direction);
        vec4 color = vec4(0, 0, 0, 0);
        if (spotFactor > spotLight.cutoff) {
          color = calcPointLight(spotLight.pointLight, normal, worldPosition) *
            (1.0 - (1.0 - spotFactor) / (1.0 - spotLight.cutoff));
        }

        return color;

      }

      vec3 getNormalFromMap(sampler2D normal_map, vec2 texCoord, mat3 tbnMatrix)  {
          // This is a technique i got from learn opengl and they flatened it out a bit,
          // since i calculate my tbn matrix in the lighting-vert.glh i dont need to 
          // recalculte it and i can simply pass it into this method and return the normal 
          // value by multiplying the map to the matrix.

          // vec3 tangentNormal = texture(normalMap, TexCoords).xyz * 2.0 - 1.0;

          // vec3 Q1  = dFdx(WorldPos);
          // vec3 Q2  = dFdy(WorldPos);
          // vec2 st1 = dFdx(TexCoords);
          // vec2 st2 = dFdy(TexCoords);

          // vec3 N   = normalize(Normal);
          // vec3 T  = normalize(Q1*st2.t - Q2*st1.t);
          // vec3 B  = -normalize(cross(N, T));
          // mat3 TBN = mat3(T, B, N);

          // return normalize(TBN * tangentNormal);
          
          vec3 normal = tbnMatrix * (255.0/128.0 * texture2D(normal_map, texCoord0.xy).xyz - 1);

          return normal;
      }

      uniform PointLight R_pointLight;

      vec4 calcLighting(vec3 normal, vec3 worldPos) {
        return calcPointLight(R_pointLight, normal, worldPos);
      }
      void main() {
        // tbnMatrix orients it in the correct position as for the objects rotation in the game world.
        // This Can Sometimes Return A Value Of negatives or values greater than 1 since normals can be both,
        // so i multiply it by 255 to make represent a up vector since up is half way between 255 and 0 and that is 128
        // just like how 90 degrees is half way between 180 and 0.
        
        vec3 normal;

        if (normal_mapping_enabled == 0) {
          normal = tbnMatrix * (255.0/128.0 * texture2D(normal_map, texCoord0.xy).xyz - 1);
        } else {
          normal = normalize(normal0);
        }
        
        gl_FragColor = texture2D(diffuse, texCoord0.xy) * calcLighting(normal, worldPosition0);
      }
#These properties are used to demolish the render.
AE_DEMO_PROPERTIES:
  - AE_DEMO_PROPERTY_IDENTIFIER: "GL_DISABLE"
    AE_DEMO_PROPERTY_PARAMETERS: ["BLEND"]
  - AE_DEMO_PROPERTY_IDENTIFIER: "BLEND_FUNC"
    AE_DEMO_PROPERTY_PARAMETERS: ["GL_ONE_MINUS_SRC", "GL_ONE"]
  - AE_DEMO_PROPERTY_IDENTIFIER: "DEPTH_MASK"
    AE_DEMO_PROPERTY_PARAMETERS: ["GL_FALSE"]
  - AE_DEMO_PROPERTY_IDENTIFIER: "DEPTH_FUNC"
    AE_DEMO_PROPERTY_PARAMETERS: ["GL_EQUAL"]
  - AE_DEMO_PROPERTY_IDENTIFIER: "GL_DRAW_MODE"
    AE_DEMO_PROPERTY_PARAMETERS: ["GL_TRIANGLES"]
