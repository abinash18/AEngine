// Vars
//Position of the camera.
uniform vec3 C_eyePos; 
uniform float specularIntensity;
uniform float specularPower;

// Booleans 0 - fasle, 1 - true.
uniform int normal_mapping_enabled;

// Structures
struct BaseLight {
  vec3 color;
  float intensity;
};

struct DirectionalLight {
  BaseLight base;
  vec3 direction;
};

struct Attenuation {
  float constant;
  float linear;
  float exponent;
};

struct PointLight {
  BaseLight base;
  Attenuation atten;
  vec3 position;
  float range;
};

struct SpotLight {
  PointLight pointLight;
  vec3 direction;
  float cutoff;
};

// Functions

vec4 calcLight(BaseLight base, vec3 direction, vec3 normal, vec3 worldPosition) {
  float diffuseFactor = dot(normal, -direction);
  vec4 diffuseColor = vec4(0, 0, 0, 0);
  vec4 specularColor = vec4(0, 0, 0, 0);

  if (diffuseFactor > 0) {
    diffuseColor = vec4(base.color, 1.0) * base.intensity * diffuseFactor;

    vec3 directionToEye = normalize(C_eyePos - worldPosition);

    // More Accurate I guess but ididnt like the way it looked
    //vec3 halfDirection = normalize(directionToEye - direction);
    //float specularFactor = dot(halfDirection, normal);

    vec3 reflectDirection = normalize(reflect(direction, normal));
    float specularFactor = dot(directionToEye, reflectDirection);

    specularFactor = pow(specularFactor, specularPower);

    if(specularFactor > 0){
      specularColor = vec4(base.color, 1.0) * specularIntensity * specularFactor;
    }
  }
  return diffuseColor + specularColor;
}

vec4 calcDirectionalLight(DirectionalLight directionalLight, vec3 normal, vec3 worldPosition) {
  return (calcLight(directionalLight.base, -directionalLight.direction, normal, worldPosition));
}

vec4 calcPointLight(PointLight pointLight, vec3 normal, vec3 worldPosition){
  vec3 lightDirection = worldPosition - pointLight.position;
  float distanceToPoint = length(lightDirection);
  if (distanceToPoint > pointLight.range) {
    return vec4(0, 0, 0, 0);
  }
  lightDirection = normalize(lightDirection);

  vec4 color = calcLight(pointLight.base, lightDirection, normal, worldPosition);

  float attenuation = pointLight.atten.constant + pointLight.atten.linear * distanceToPoint +
  pointLight.atten.exponent * distanceToPoint * distanceToPoint + 0.0001;

  return color / attenuation;
}

vec4 calcSpotLight(SpotLight spotLight, vec3 normal, vec3 worldPosition)  {
  vec3 lightDirection = normalize(worldPosition - spotLight.pointLight.position);
  float spotFactor = dot(lightDirection, spotLight.direction);
  vec4 color = vec4(0, 0, 0, 0);
  if (spotFactor > spotLight.cutoff) {
    color = calcPointLight(spotLight.pointLight, normal, worldPosition) *
      (1.0 - (1.0 - spotFactor) / (1.0 - spotLight.cutoff));
  }

  return color;

}

vec3 getNormalFromMap(sampler2D normal_map, vec2 texCoord, mat3 tbnMatrix)  {
    // This is a technique i got from learn opengl and they flatened it out a bit,
    // since i calculate my tbn matrix in the lighting-vert.glh i dont need to 
    // recalculte it and i can simply pass it into this method and return the normal 
    // value by multiplying the map to the matrix.

    // vec3 tangentNormal = texture(normalMap, TexCoords).xyz * 2.0 - 1.0;

    // vec3 Q1  = dFdx(WorldPos);
    // vec3 Q2  = dFdy(WorldPos);
    // vec2 st1 = dFdx(TexCoords);
    // vec2 st2 = dFdy(TexCoords);

    // vec3 N   = normalize(Normal);
    // vec3 T  = normalize(Q1*st2.t - Q2*st1.t);
    // vec3 B  = -normalize(cross(N, T));
    // mat3 TBN = mat3(T, B, N);

    // return normalize(TBN * tangentNormal);
    
    vec3 normal = tbnMatrix * (255.0/128.0 * texture2D(normal_map, texCoord0.xy).xyz - 1);

    return normal;
}