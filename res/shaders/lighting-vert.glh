layout (location = 0) in vec3 position;
layout (location = 1) in vec2 texCoord;
layout (location = 2) in vec3 normal;
layout (location = 3) in vec3 tangent;
//attribute vec3 baryCentric;

out vec2 texCoord0;
out vec3 normal0;
out vec3 worldPosition0;
out mat3 tbnMatrix;
//varying vec3 vBC;

uniform mat4 T_model;
uniform mat4 T_MVP;

void main() {
  gl_Position = T_MVP * vec4(position, 1.0);
  texCoord0 =  texCoord;
  // This is here for convinience in the future this will be removed,
  // and the normal can be extracted from the 3rd dimenstion
  // of the tbnMatrix.
  normal0 = (T_model * vec4(normal, 0.0)).xyz;
  worldPosition0 = (T_model * vec4(position, 1.0)).xyz;

  // Here i set the normal in the n variable which is normalized!
  vec3 n = normalize((T_model * vec4(normal, 0.0)).xyz);
  vec3 t = normalize((T_model * vec4(tangent, 0.0)).xyz);

  t = normalize(t - dot(t, n) * n);

  vec3 biTangent = cross(t, n);

  tbnMatrix = mat3(t, biTangent, n);
}